import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

def main():
    iris = load_iris()
    X = iris.data
    y = iris.target
    feature_names = iris.feature_names
    target_name = 'target'

    df = pd.DataFrame(X, columns=feature_names)
    df[target_name] = y
    
    print("Available features:")
    for i, feature in enumerate(feature_names):
        print(f"{i+1}. {feature}")
    
    print(f"Target variable: {target_name}")

    feature_columns = input("\nEnter the feature names you want to use (comma-separated): ").strip().split(',')
    target_column = input("Enter the target variable name: ").strip()
    
    feature_columns = [col.strip() for col in feature_columns]
    
    if not all(col in df.columns for col in feature_columns):
        print("Error: One or more feature names are incorrect.")
        return
    if target_column not in df.columns:
        print("Error: Target variable name is incorrect.")
        return

    X = df[feature_columns]
    y = df[target_column]
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    model = LogisticRegression(max_iter=200)
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)
    
    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred, average='weighted')
    recall = recall_score(y_test, y_pred, average='weighted')
    f1 = f1_score(y_test, y_pred, average='weighted')
    
    print("\nModel Evaluation Metrics:")
    print(f"Accuracy: {accuracy:.2f}")
    print(f"Precision: {precision:.2f}")
    print(f"Recall: {recall:.2f}")
    print(f"F1-Score: {f1:.2f}")

if __name__ == "__main__":
    main()
