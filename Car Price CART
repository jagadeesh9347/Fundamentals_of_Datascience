import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor, export_text
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

np.random.seed(42)
data = pd.DataFrame({
    'mileage': np.random.randint(5000, 200000, 100),
    'age': np.random.randint(1, 20, 100),
    'brand': np.random.choice(['Toyota', 'Ford', 'BMW', 'Audi'], 100),
    'engine_type': np.random.choice(['Petrol', 'Diesel', 'Electric'], 100),
    'price': np.random.randint(5000, 50000, 100)
})

print(data.isnull().sum())

data['brand'] = LabelEncoder().fit_transform(data['brand'])
data['engine_type'] = LabelEncoder().fit_transform(data['engine_type'])

X = data.drop('price', axis=1)
y = data['price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = DecisionTreeRegressor(random_state=42)
model.fit(X_train, y_train)

def predict_car_price(new_car_features):
    
    new_car_df = pd.DataFrame([new_car_features])
    new_car_df['brand'] = LabelEncoder().fit_transform(new_car_df['brand'])
    new_car_df['engine_type'] = LabelEncoder().fit_transform(new_car_df['engine_type'])
    predicted_price = model.predict(new_car_df)[0]
    
    tree_rules = export_text(model, feature_names=list(X.columns))
    
    return predicted_price, tree_rules

new_car_features = {
    'mileage': 50000,
    'age': 5,
    'brand': 'Toyota',
    'engine_type': 'Petrol'
}

predicted_price, decision_path = predict_car_price(new_car_features)
print(f'Predicted Price: ${predicted_price:.2f}')
print('\nDecision Path:\n', decision_path)

y_pred = model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f'Mean Absolute Error (MAE): {mae:.2f}')
print(f'Mean Squared Error (MSE): {mse:.2f}')
print(f'Root Mean Squared Error (RMSE): {rmse:.2f}')
print(f'R-squared (R2): {r2:.2f}')
